/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template saveFile, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import graphics.editor.EditImagePanel;
import graphics.support.ImagePacker;
import java.awt.Color;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import support.reader.SokobanReader;
import support.writer.SokobanWriter;

/**
 *
 * @author anei
 */
public class EditFrame extends javax.swing.JFrame {
    
    private int width;
    private int height;
    private final ImagePacker packer;
    private File saveFile;

    /**
     * Creates new form EditFrame
     * @param width width of problem grid
     * @param height height of problem grid
     */
    public EditFrame(int width, int height) {
        this.width = width;
        this.height = height;
        this.packer = new ImagePacker();
        this.saveFile = null;
        
        //goFullscreen();
        initComponents();
        initEditPanel();
        initParameters();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectFileWindow = new javax.swing.JFileChooser();
        jSplitPane1 = new javax.swing.JSplitPane();
        resourcesPanel = new javax.swing.JPanel();
        zoomSlider = new javax.swing.JSlider();
        wallIcon = new javax.swing.JLabel();
        wallLabel = new javax.swing.JLabel();
        freeIcon = new javax.swing.JLabel();
        freeLabel = new javax.swing.JLabel();
        workerIcon = new javax.swing.JLabel();
        workerLabel = new javax.swing.JLabel();
        goalIcon = new javax.swing.JLabel();
        goalLabel = new javax.swing.JLabel();
        crateIcon = new javax.swing.JLabel();
        crateLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveMenu = new javax.swing.JMenuItem();
        SaveAsMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exportMenu = new javax.swing.JMenuItem();
        importMenu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        quitMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sokoban problem editor");
        setPreferredSize(new java.awt.Dimension(1000, 600));

        zoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomSliderStateChanged(evt);
            }
        });

        wallIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wallSelected(evt);
            }
        });

        wallLabel.setText("wall");
        wallLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wallSelected(evt);
            }
        });

        freeIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                freeSelected(evt);
            }
        });

        freeLabel.setText("free space");
        freeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                freeSelected(evt);
            }
        });

        workerIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workerSelected(evt);
            }
        });

        workerLabel.setText("worker");
        workerLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workerSelected(evt);
            }
        });

        goalIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                goalSelected(evt);
            }
        });

        goalLabel.setText("goal");
        goalLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                goalSelected(evt);
            }
        });

        crateIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crateSelected(evt);
            }
        });

        crateLabel.setText("crate");
        crateLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crateSelected(evt);
            }
        });

        javax.swing.GroupLayout resourcesPanelLayout = new javax.swing.GroupLayout(resourcesPanel);
        resourcesPanel.setLayout(resourcesPanelLayout);
        resourcesPanelLayout.setHorizontalGroup(
            resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resourcesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(resourcesPanelLayout.createSequentialGroup()
                        .addComponent(wallIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(wallLabel))
                    .addGroup(resourcesPanelLayout.createSequentialGroup()
                        .addComponent(freeIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(freeLabel))
                    .addGroup(resourcesPanelLayout.createSequentialGroup()
                        .addComponent(workerIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(workerLabel))
                    .addGroup(resourcesPanelLayout.createSequentialGroup()
                        .addComponent(goalIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(goalLabel))
                    .addGroup(resourcesPanelLayout.createSequentialGroup()
                        .addComponent(crateIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(crateLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(zoomSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        resourcesPanelLayout.setVerticalGroup(
            resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resourcesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wallIcon)
                    .addComponent(wallLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freeIcon)
                    .addComponent(freeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workerIcon)
                    .addComponent(workerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goalIcon)
                    .addComponent(goalLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(crateIcon)
                    .addComponent(crateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                .addComponent(zoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setLeftComponent(resourcesPanel);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setText("Save");
        saveMenu.setToolTipText("Save grid to file.");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenu);

        SaveAsMenu.setText("Save as");
        SaveAsMenu.setToolTipText("Save in a new file.");
        SaveAsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsMenuActionPerformed(evt);
            }
        });
        jMenu1.add(SaveAsMenu);
        jMenu1.add(jSeparator1);

        exportMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exportMenu.setText("Export");
        exportMenu.setToolTipText("Export grid to file.");
        exportMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportMenuActionPerformed(evt);
            }
        });
        jMenu1.add(exportMenu);

        importMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        importMenu.setText("Import");
        importMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importMenuActionPerformed(evt);
            }
        });
        jMenu1.add(importMenu);
        jMenu1.add(jSeparator2);

        quitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenu.setText("Quit");
        quitMenu.setToolTipText("Quit the application.");
        jMenu1.add(quitMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editPanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_editPanelComponentResized
        
    }//GEN-LAST:event_editPanelComponentResized

    private void wallSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wallSelected
        editPanel.setCurrentSpace(ImagePacker.WALL);
        
        resetBackgroundColors();
        
        wallLabel.setBackground(Color.lightGray);
    }//GEN-LAST:event_wallSelected

    private void freeSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_freeSelected
        editPanel.setCurrentSpace(ImagePacker.FREE);
        
        resetBackgroundColors();
        
        freeLabel.setBackground(Color.lightGray);
    }//GEN-LAST:event_freeSelected

    private void workerSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workerSelected
        editPanel.setCurrentSpace(ImagePacker.WORKER);
        
        resetBackgroundColors();
        
        workerLabel.setBackground(Color.lightGray);
    }//GEN-LAST:event_workerSelected

    private void goalSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_goalSelected
        editPanel.setCurrentSpace(ImagePacker.GOAL);
        
        resetBackgroundColors();
        
        goalLabel.setBackground(Color.lightGray);
    }//GEN-LAST:event_goalSelected

    private void crateSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crateSelected
        editPanel.setCurrentSpace(ImagePacker.CRATE);
        
        resetBackgroundColors();
        
        crateLabel.setBackground(Color.lightGray);
    }//GEN-LAST:event_crateSelected

    private void zoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomSliderStateChanged
        editPanel.resize(zoomSlider.getValue());
    }//GEN-LAST:event_zoomSliderStateChanged

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        if (canSaveGrid()) {
            editPanel.optimizeGrid();
            
            if (saveFile == null) {
                saveFile = selectFile();
            }

            saveToFile(saveFile);
        }
    }//GEN-LAST:event_saveMenuActionPerformed

    private void SaveAsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsMenuActionPerformed
        if (canSaveGrid()) {
            editPanel.optimizeGrid();
            saveFile = selectFile();
            saveToFile(saveFile);
        }
    }//GEN-LAST:event_SaveAsMenuActionPerformed

    private void exportMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMenuActionPerformed
        if (canSaveGrid()) {
            editPanel.optimizeGrid();
            File file = selectFile();
            saveToFile(file);
        }
    }//GEN-LAST:event_exportMenuActionPerformed

    private void importMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importMenuActionPerformed
        int retVal = JOptionPane.showOptionDialog(this, "Do you want to import grid from file?", "Confirm import", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
        
        if (retVal == 0) {
            // read the grid
            saveFile = selectFile();
            importFromFile(saveFile);
        }
    }//GEN-LAST:event_importMenuActionPerformed

    
    // Class methods
    
    // Public
    public void importFileToEdit(File file) {
        saveFile = file;
        importFromFile(file);
    }
    
    // Private
    private void goFullscreen() {
        setExtendedState(Frame.MAXIMIZED_BOTH);
    }
    
    private void initEditPanel() {
        editPanel = new EditImagePanel(width, height, packer);
        jSplitPane1.setRightComponent(editPanel);
    }
    
    private void initParameters() {
        zoomSlider.setMaximum(10);
        zoomSlider.setMinimum(1);
        zoomSlider.setValue(10);
        
        wallIcon.setIcon(new ImageIcon(packer.getImage(ImagePacker.WALL)));
        freeIcon.setIcon(new ImageIcon(packer.getImage(ImagePacker.FREE)));
        workerIcon.setIcon(new ImageIcon(packer.getImage(ImagePacker.WORKER)));
        goalIcon.setIcon(new ImageIcon(packer.getImage(ImagePacker.GOAL)));
        crateIcon.setIcon(new ImageIcon(packer.getImage(ImagePacker.CRATE)));

        wallLabel.setOpaque(true);
        freeLabel.setOpaque(true);
        workerLabel.setOpaque(true);
        goalLabel.setOpaque(true);
        crateLabel.setOpaque(true);
    }
    
    private void resetBackgroundColors() {
        wallLabel.setBackground(null);
        freeLabel.setBackground(null);
        workerLabel.setBackground(null);
        goalLabel.setBackground(null);
        crateLabel.setBackground(null);
    }
    
    private File selectFile() {
        int retVal = selectFileWindow.showOpenDialog(this);
        
        File sFile = null;
        
        if (retVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            sFile = selectFileWindow.getSelectedFile();

            if (!sFile.getName().endsWith(".skvi")) {
                sFile = null;
                JOptionPane.showMessageDialog(this, "Invalid file name extension. File name should end in '.txt'.", "Warning", javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        }
        
        return sFile;
    }
    
    private void saveToFile(File sFile) {
        if (sFile != null) {
            try {
                sFile.createNewFile();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Cannot create new save file.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                System.out.println("ERROR: EditFrame@saveAsMenuActionPerformed - cannot create new save file.");
            }
            
            if (sFile.exists()) {
                SokobanWriter sw = new SokobanWriter(sFile);
                if (sw.isEnabled()) {
                    sw.write(editPanel.getGridWidth(), editPanel.getGridHeight(), editPanel.getGrid(), editPanel.getGameState());
                }
            }
        }
    }
    
    private boolean canSaveGrid() {
        if (!editPanel.isWallConnected()) {
            JOptionPane.showMessageDialog(this, "The outer walls must be connected!", "Warning", javax.swing.JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        if (!editPanel.isWorkerPresent()) {
            JOptionPane.showMessageDialog(this, "There is no worker!", "Warning", javax.swing.JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        if (!editPanel.isCrateGoalNumOk()) {
            JOptionPane.showMessageDialog(this, "The number of crates and goals must be the same and also higher than 1!", "Warning", javax.swing.JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private void importFromFile(File file) {
        SokobanReader reader = new SokobanReader(file);
            
        if (reader.isEnabled()) {
            reader.read(editPanel.getGrid(), editPanel.getGameState());
            
            this.width = reader.getWidth();
            this.height = reader.getHeight();
                
            // resize the display grid
            editPanel.resizeGrid(this.width, this.height);
        }
    }
    
    // End class methods
    
    
    private EditImagePanel editPanel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem SaveAsMenu;
    private javax.swing.JLabel crateIcon;
    private javax.swing.JLabel crateLabel;
    private javax.swing.JMenuItem exportMenu;
    private javax.swing.JLabel freeIcon;
    private javax.swing.JLabel freeLabel;
    private javax.swing.JLabel goalIcon;
    private javax.swing.JLabel goalLabel;
    private javax.swing.JMenuItem importMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem quitMenu;
    private javax.swing.JPanel resourcesPanel;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JFileChooser selectFileWindow;
    private javax.swing.JLabel wallIcon;
    private javax.swing.JLabel wallLabel;
    private javax.swing.JLabel workerIcon;
    private javax.swing.JLabel workerLabel;
    private javax.swing.JSlider zoomSlider;
    // End of variables declaration//GEN-END:variables
}

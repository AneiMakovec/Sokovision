/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import graphics.EditImagePanel;
import graphics.ImagePacker;
import java.awt.Frame;
import javax.swing.ImageIcon;

/**
 *
 * @author anei
 */
public class EditFrame extends javax.swing.JFrame {
    
    private int width;
    private int height;
    private final ImagePacker packer;

    /**
     * Creates new form EditFrame
     * @param width width of problem grid
     * @param height height of problem grid
     */
    public EditFrame(int width, int height) {
        this.width = width;
        this.height = height;
        this.packer = new ImagePacker();
        
        goFullscreen();
        initComponents();
        initEditPanel();
        initParameters();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        resourcesPanel = new javax.swing.JPanel();
        zoomSlider = new javax.swing.JSlider();
        wallIcon = new javax.swing.JLabel();
        wallLabel = new javax.swing.JLabel();
        freeIcon = new javax.swing.JLabel();
        freeLabel = new javax.swing.JLabel();
        workerIcon = new javax.swing.JLabel();
        workerLabel = new javax.swing.JLabel();
        goalIcon = new javax.swing.JLabel();
        goalLabel = new javax.swing.JLabel();
        crateIcon = new javax.swing.JLabel();
        crateLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sokoban problem editor");

        wallIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wallSelected(evt);
            }
        });

        wallLabel.setText("wall");
        wallLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wallSelected(evt);
            }
        });

        freeIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                freeSelected(evt);
            }
        });

        freeLabel.setText("free space");
        freeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                freeSelected(evt);
            }
        });

        workerIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workerSelected(evt);
            }
        });

        workerLabel.setText("worker");
        workerLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workerSelected(evt);
            }
        });

        goalIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                goalSelected(evt);
            }
        });

        goalLabel.setText("goal");
        goalLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                goalSelected(evt);
            }
        });

        crateIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crateSelected(evt);
            }
        });

        crateLabel.setText("crate");
        crateLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crateSelected(evt);
            }
        });

        javax.swing.GroupLayout resourcesPanelLayout = new javax.swing.GroupLayout(resourcesPanel);
        resourcesPanel.setLayout(resourcesPanelLayout);
        resourcesPanelLayout.setHorizontalGroup(
            resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resourcesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(resourcesPanelLayout.createSequentialGroup()
                        .addComponent(wallIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(wallLabel))
                    .addGroup(resourcesPanelLayout.createSequentialGroup()
                        .addComponent(freeIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(freeLabel))
                    .addGroup(resourcesPanelLayout.createSequentialGroup()
                        .addComponent(workerIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(workerLabel))
                    .addGroup(resourcesPanelLayout.createSequentialGroup()
                        .addComponent(goalIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(goalLabel))
                    .addGroup(resourcesPanelLayout.createSequentialGroup()
                        .addComponent(crateIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(crateLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(zoomSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        resourcesPanelLayout.setVerticalGroup(
            resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resourcesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wallIcon)
                    .addComponent(wallLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freeIcon)
                    .addComponent(freeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workerIcon)
                    .addComponent(workerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goalIcon)
                    .addComponent(goalLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(crateIcon)
                    .addComponent(crateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                .addComponent(zoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setLeftComponent(resourcesPanel);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editPanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_editPanelComponentResized
        
    }//GEN-LAST:event_editPanelComponentResized

    private void wallSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wallSelected
        editPanel.setCurrentSpace(ImagePacker.WALL);
    }//GEN-LAST:event_wallSelected

    private void freeSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_freeSelected
        editPanel.setCurrentSpace(ImagePacker.FREE);
    }//GEN-LAST:event_freeSelected

    private void workerSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workerSelected
        editPanel.setCurrentSpace(ImagePacker.WORKER);
    }//GEN-LAST:event_workerSelected

    private void goalSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_goalSelected
        editPanel.setCurrentSpace(ImagePacker.GOAL);
    }//GEN-LAST:event_goalSelected

    private void crateSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crateSelected
        editPanel.setCurrentSpace(ImagePacker.CRATE);
    }//GEN-LAST:event_crateSelected

    
    // Class methods
    
    // Private
    
    private void goFullscreen() {
        setExtendedState(Frame.MAXIMIZED_BOTH);
    }
    
    private void initEditPanel() {
        editPanel = new EditImagePanel(width, height, packer);
        jSplitPane1.setRightComponent(editPanel);
    }
    
    private void initParameters() {
        zoomSlider.setMaximum(10);
        zoomSlider.setMinimum(1);
        zoomSlider.setValue(10);
        
        wallIcon.setIcon(new ImageIcon(packer.getImage(ImagePacker.WALL)));
        freeIcon.setIcon(new ImageIcon(packer.getImage(ImagePacker.FREE)));
        workerIcon.setIcon(new ImageIcon(packer.getImage(ImagePacker.WORKER)));
        goalIcon.setIcon(new ImageIcon(packer.getImage(ImagePacker.GOAL)));
        crateIcon.setIcon(new ImageIcon(packer.getImage(ImagePacker.CRATE)));
    }
    
    
    // End class methods
    
    
    private EditImagePanel editPanel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel crateIcon;
    private javax.swing.JLabel crateLabel;
    private javax.swing.JLabel freeIcon;
    private javax.swing.JLabel freeLabel;
    private javax.swing.JLabel goalIcon;
    private javax.swing.JLabel goalLabel;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel resourcesPanel;
    private javax.swing.JLabel wallIcon;
    private javax.swing.JLabel wallLabel;
    private javax.swing.JLabel workerIcon;
    private javax.swing.JLabel workerLabel;
    private javax.swing.JSlider zoomSlider;
    // End of variables declaration//GEN-END:variables
}
